@startuml

package "UI + Application Layer" <<Rectangle>> {
    class TopFragment {
        + onCreateView()
        + onCreate()
        + onResume()
    }
    class JobService {
        + onStartJob()
        + onStopJob()
        + {static} schedule()
    }
    abstract ViewModel {
        + viewModelScope: CoroutineScope
    }
    class TopViewModel {
        + load()
        + register()
    }
}

package "Domain Layer" <<Rectangle>> {
    abstract Usecase {
        # result: MediatorLiveData<UsecaseResult<Any>>
        + source: LiveData<UsecaseResult<Any>>
        + execute(param: Any)
    }
    class LoadUserUsecase {
        # call(param: Any): Deferred<Any>
    }
    class RegisterUserUsecase {
        # call(param: Any): Deferred<Any>
    }
    class BackgroundUsecase {
        # call(param: Any): Deferred<Any>
    }
}

package "Infrastructure Layer" <<Rectangle>> {
    interface UserRepository {
        + getAllUser()
        + addUser()
    }
    class UserRepositoryImpl << (O,#FF7700) Singleton >> {
        # getAllUser()
        # addUser()
    }
    class UserLocalDataSource << (O,#FF7700) Singleton >> {
        + getAll()
        + insertAll()
        + deleteAll()
    }
    class UserRemoteDataSource << (O,#FF7700) Singleton >> {
        + getUser()
        + postUser(UserEntity)
    }
    class AppDatabase << (O,#FF7700) Singleton >> {
        ~ {static} getDatabase()
    }
    class AppRestApi << (O,#FF7700) Singleton >> {
        ~ fetch(): ApiParameter<*>
    }
}

package "Entity Layer" <<Rectangle>> {
    enum UsecaseResult {
        Pending
        Resolved
        Rejected
        + isFinished()
        + isLoading()
    }
    enum ApiResult {
        Success
        Failed
    }
    enum ApiParameter {
        GetParameter
        PostParameter
        + call(url, body, header)
     }
    interface UserDao {
        + getAll()
        + insertAll()
        + deleteAll()
    }
}

TopFragment -ri-> TopViewModel
TopViewModel -do-|> ViewModel

JobService -ri-> BackgroundUsecase
TopViewModel -ri-> LoadUserUsecase
TopViewModel -ri-> RegisterUserUsecase

LoadUserUsecase ---do-|> Usecase
RegisterUserUsecase --do-|> Usecase
BackgroundUsecase -do-|> Usecase

LoadUserUsecase -ri-> UserRepository
RegisterUserUsecase -ri-> UserRepository

Usecase -do- UsecaseResult
UserRepository <|.. UserRepositoryImpl

UserRepositoryImpl o-do- UserLocalDataSource : aggregation
UserLocalDataSource -do-> AppDatabase
AppDatabase o-do- UserDao : aggregation

UserRepositoryImpl o-do- UserRemoteDataSource : aggregation
UserRemoteDataSource -do-> AppRestApi
AppRestApi -- ApiParameter
AppRestApi -- ApiResult


'Foo -up-> 上
'Foo -do-> 下
'Foo -le-> 左
'Foo -ri-> 右

@enduml